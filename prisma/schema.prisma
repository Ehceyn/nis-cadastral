generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  role          Role      @default(SURVEYOR)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  surveyor      Surveyor?
  surveyJobs    SurveyJob[]
  
  @@map("users")
}

model Surveyor {
  id            String   @id @default(cuid())
  userId        String   @unique
  licenseNumber String   @unique
  firmName      String
  phoneNumber   String
  address       String
  status        SurveyorStatus @default(PENDING)
  verifiedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id])
  surveyJobs    SurveyJob[]
  pillarNumbers PillarNumber[]
  
  @@map("surveyors")
}

model SurveyJob {
  id           String    @id @default(cuid())
  jobNumber    String    @unique
  clientName   String
  clientEmail  String?
  clientPhone  String?
  location     String
  coordinates  Json?
  description  String?
  status       JobStatus @default(SUBMITTED)
  submittedAt  DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  surveyorId   String
  surveyor     Surveyor  @relation(fields: [surveyorId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  documents    Document[]
  workflowSteps WorkflowStep[]
  pillarNumbers PillarNumber[]
  
  @@map("survey_jobs")
}

model PillarNumber {
  id           String   @id @default(cuid())
  pillarNumber String   @unique
  coordinates  Json
  issuedDate   DateTime @default(now())
  
  surveyJobId  String
  surveyJob    SurveyJob @relation(fields: [surveyJobId], references: [id])
  surveyorId   String
  surveyor     Surveyor  @relation(fields: [surveyorId], references: [id])
  
  @@map("pillar_numbers")
}

model Document {
  id           String      @id @default(cuid())
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  documentType DocumentType
  uploadedAt   DateTime    @default(now())
  
  surveyJobId  String
  surveyJob    SurveyJob   @relation(fields: [surveyJobId], references: [id])
  
  @@map("documents")
}

model WorkflowStep {
  id          String    @id @default(cuid())
  stepName    String
  status      StepStatus @default(PENDING)
  completedAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  
  surveyJobId String
  surveyJob   SurveyJob @relation(fields: [surveyJobId], references: [id])
  
  @@map("workflow_steps")
}

enum Role {
  SURVEYOR
  NIS_OFFICER
  ADMIN
  PUBLIC
}

enum SurveyorStatus {
  PENDING
  VERIFIED
  SUSPENDED
  REJECTED
}

enum JobStatus {
  SUBMITTED
  NIS_REVIEW
  NIS_APPROVED
  NIS_REJECTED
  ADMIN_REVIEW
  ADMIN_APPROVED
  ADMIN_REJECTED
  COMPLETED
}

enum DocumentType {
  SURVEY_PLAN
  SURVEY_REPORT
  COORDINATES
  LEGAL_DOCS
  OTHER
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}
